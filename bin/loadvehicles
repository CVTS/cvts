#!/usr/bin/env python

import os
import csv
from pprint import pprint
from sqlalchemy import create_engine
from sqlalchemy.orm import Session
from cvts.settings import POSTGRES_CONNECTION_STRING, CONFIG_PATH
from cvts.models import Vehicle, VehicleType

UNCLASSIFIED_STRING = 'Xe chưa phân loại'
engine = create_engine(POSTGRES_CONNECTION_STRING)

with open(os.path.join(CONFIG_PATH, 'vehicle-types.csv'), 'r') as vt:
    reader = csv.DictReader(vt)
    vehicle_types = {r['type_vn']: VehicleType(**r) for r in reader}
    
vehicles = {}
with open(os.path.join(CONFIG_PATH, 'vehicle-to-vehicle-type.csv'), 'r') as vtvt:
    reader = csv.DictReader(vtvt)
    for i, row in enumerate(reader):
        try:
            vt = row.get('vehicle_type', None).strip()
            rego = rego = row['vehicle_id_string'].strip()
            if rego in vehicles:
                if vehicles[rego] == UNCLASSIFIED_STRING:
                    vehicles[rego] = vt
                else:
                    if vt != UNCLASSIFIED_STRING:
                        raise Exception('duplicate vehicle types: "{}" and "{}"'.format(
                            vt, vehicles[rego]))
            else:
                vehicles[rego] = vt

        except Exception as e:
            # TODO: warning to log
            print('error at {}: {}'.format(i, e))
            raise

with Session(engine) as session, session.begin():
    for v in vehicle_types.values():
        session.add(v)

    for i, (rego, vt) in enumerate(vehicles.items()):
        try:
            if vt is None or vt == '':
                vehicle = Vehicle(rego=rego)
            else:
                vehicle = Vehicle(
                    vehicle_type = vehicle_types[vt],
                    rego = rego)
            session.add(vehicle)
        except Exception as e:
            # TODO: warning to log
            print('error at {}: '.format(i, e))
            raise
